{"version":3,"file":"274.js","mappings":"2MAMOA,eAAeC,EAAYC,EAAYC,EAAcC,EAAOC,GAC/D,IAAK,CAAC,QAAS,eAAeC,SAASJ,GACnC,MAAM,IAAIK,MAAM,oCAAoCL,OAGxD,GAAqB,IAAjBE,EAAMI,OACN,OAGJ,MAAMC,EAAS,IAAMC,aAAa,IAClC,IAAIC,EAAU,EAEd,IAAK,MAAMC,KAAQR,EAAO,CACtBO,IAEA,MAAME,EAAW,IAAIC,SACrBD,EAASE,OAAO,SAAUH,GAC1BC,EAASE,OAAO,SAAUN,GAC1BI,EAASE,OAAO,OAAQJ,IAAYP,EAAMI,OAAS,OAAS,SAE5D,IAAK,MAAMQ,KAAOX,EACdQ,EAASE,OAAOC,EAAKX,EAAQW,UAG3BC,EAAEC,KAAK,CACTC,IAAK,GAAGC,OAAOC,KAAKC,mBAAmBnB,KAAgBD,WACvDqB,cAAe,IAAOC,aACtBC,KAAMZ,EACNa,SAAU,OACVC,KAAM,OACNC,QAAS,KACTC,MAAO,SAAUC,GACb,UAAaC,UAAU,kBAAkBD,EAAIE,eACjD,EACAC,aAAa,EACbC,aAAa,GAErB,CACJ,CAEA,SAASC,EAAUC,EAAIC,GACnB,MAAO,CACHD,GAAIA,EACJE,MAAO,gBACPD,QAASA,EACTE,KAAM,OAEd,CAEA,IAAGC,qBAAoBxC,UACnB,GAAyB,gBAArBqC,EAAQI,SAIZ,GAAqB,cAAjBJ,EAAQV,KACR,UAAae,gBAAgBL,EAAQ5B,QACrC,UAAasB,UAAUM,EAAQA,cAC5B,GAAqB,sBAAjBA,EAAQV,KACf,UAAagB,eAAeR,EAAUE,EAAQ5B,OAAQ,uBAAuB4B,EAAQO,uBAClF,GAAqB,kBAAjBP,EAAQV,KAA0B,CACzC,MAAMkB,EAAQV,EAAUE,EAAQ5B,OAAQ,iCACxCoC,EAAMC,WAAa,IAEnB,UAAaH,eAAeE,GAExBR,EAAQU,OAAOC,sBACT,UAAWC,WAAWC,mBAAmBC,QAAQd,EAAQU,OAAOC,eAE9E,KAGJ,IAAGR,qBAAoBxC,UACnB,GAAyB,sBAArBqC,EAAQI,SAIZ,GAAqB,cAAjBJ,EAAQV,KACR,UAAae,gBAAgBL,EAAQ5B,QACrC,UAAasB,UAAUM,EAAQA,cAC5B,GAAqB,sBAAjBA,EAAQV,KACf,UAAagB,eAAeR,EAAUE,EAAQ5B,OAAQ,uBAAuB4B,EAAQO,uBAClF,GAAqB,kBAAjBP,EAAQV,KAA0B,CACzC,MAAMkB,EAAQV,EAAUE,EAAQ5B,OAAQ,iCACxCoC,EAAMC,WAAa,IAEnB,UAAaH,eAAeE,GAExBR,EAAQU,OAAO5C,oBACT,UAAW8C,WAAWC,mBAAmBC,QAAQd,EAAQU,OAAOC,eAAgB,CAClFI,UAAW,CACPC,SAAU,gBAI1B,KAGJ,SACIpD,c","sources":["webpack://trilium/./src/public/app/services/import.js"],"sourcesContent":["import toastService from \"./toast.js\";\nimport server from \"./server.js\";\nimport ws from \"./ws.js\";\nimport utils from \"./utils.js\";\nimport appContext from \"../components/app_context.js\";\n\nexport async function uploadFiles(entityType, parentNoteId, files, options) {\n    if (!['notes', 'attachments'].includes(entityType)) {\n        throw new Error(`Unrecognized import entity type '${entityType}'.`);\n    }\n\n    if (files.length === 0) {\n        return;\n    }\n\n    const taskId = utils.randomString(10);\n    let counter = 0;\n\n    for (const file of files) {\n        counter++;\n\n        const formData = new FormData();\n        formData.append('upload', file);\n        formData.append('taskId', taskId);\n        formData.append('last', counter === files.length ? \"true\" : \"false\");\n\n        for (const key in options) {\n            formData.append(key, options[key]);\n        }\n\n        await $.ajax({\n            url: `${window.glob.baseApiUrl}notes/${parentNoteId}/${entityType}-import`,\n            headers: await server.getHeaders(),\n            data: formData,\n            dataType: 'json',\n            type: 'POST',\n            timeout: 60 * 60 * 1000,\n            error: function (xhr) {\n                toastService.showError(`Import failed: ${xhr.responseText}`);\n            },\n            contentType: false, // NEEDED, DON'T REMOVE THIS\n            processData: false, // NEEDED, DON'T REMOVE THIS\n        });\n    }\n}\n\nfunction makeToast(id, message) {\n    return {\n        id: id,\n        title: \"Import status\",\n        message: message,\n        icon: \"plus\"\n    };\n}\n\nws.subscribeToMessages(async message => {\n    if (message.taskType !== 'importNotes') {\n        return;\n    }\n\n    if (message.type === 'taskError') {\n        toastService.closePersistent(message.taskId);\n        toastService.showError(message.message);\n    } else if (message.type === 'taskProgressCount') {\n        toastService.showPersistent(makeToast(message.taskId, `Import in progress: ${message.progressCount}`));\n    } else if (message.type === 'taskSucceeded') {\n        const toast = makeToast(message.taskId, \"Import finished successfully.\");\n        toast.closeAfter = 5000;\n\n        toastService.showPersistent(toast);\n\n        if (message.result.importedNoteId) {\n            await appContext.tabManager.getActiveContext().setNote(message.result.importedNoteId);\n        }\n    }\n});\n\nws.subscribeToMessages(async message => {\n    if (message.taskType !== 'importAttachments') {\n        return;\n    }\n\n    if (message.type === 'taskError') {\n        toastService.closePersistent(message.taskId);\n        toastService.showError(message.message);\n    } else if (message.type === 'taskProgressCount') {\n        toastService.showPersistent(makeToast(message.taskId, `Import in progress: ${message.progressCount}`));\n    } else if (message.type === 'taskSucceeded') {\n        const toast = makeToast(message.taskId, \"Import finished successfully.\");\n        toast.closeAfter = 5000;\n\n        toastService.showPersistent(toast);\n\n        if (message.result.parentNoteId) {\n            await appContext.tabManager.getActiveContext().setNote(message.result.importedNoteId, {\n                viewScope: {\n                    viewMode: 'attachments'\n                }\n            });\n        }\n    }\n});\n\nexport default {\n    uploadFiles\n};\n"],"names":["async","uploadFiles","entityType","parentNoteId","files","options","includes","Error","length","taskId","randomString","counter","file","formData","FormData","append","key","$","ajax","url","window","glob","baseApiUrl","headers","getHeaders","data","dataType","type","timeout","error","xhr","showError","responseText","contentType","processData","makeToast","id","message","title","icon","subscribeToMessages","taskType","closePersistent","showPersistent","progressCount","toast","closeAfter","result","importedNoteId","tabManager","getActiveContext","setNote","viewScope","viewMode"],"sourceRoot":""}