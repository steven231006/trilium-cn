{"version":3,"file":"475.js","mappings":"yLAMe,MAAMA,EAKjB,WAAAC,CAAYC,EAAYC,GACpBC,KAAKF,WAAaA,EAClBE,KAAKD,KAAOA,CAChB,CAEA,UAAME,CAAKC,GACP,IAAYD,KAAK,CACbE,EAAGD,EAAEE,MACLC,EAAGH,EAAEI,MACLC,YAAaP,KAAKQ,eAClBC,sBAAuB,CAACC,EAAMR,IAAMF,KAAKS,sBAAsBC,IAEvE,CAEA,kBAAMF,GACF,MAAMG,QAAa,UAAMC,QAAQZ,KAAKD,KAAKc,KAAKC,QAC1CC,EAAef,KAAKD,KAAKiB,YAAYH,KAAKC,OAE1CG,EAAgC,wBAAhBN,EAAKG,OACrBI,EAAkC,0BAAhBP,EAAKG,OACvBK,EAAiC,wBAAjBJ,EAChBK,EAAmC,0BAAjBL,EAClBM,EAASF,GAAiBC,EAC1BE,GAAgBX,EAAKG,OAAOS,WAAW,KAG7C,MAAO,CACFN,GAAiBC,EAAmB,CAAEM,MAAO,sBAAuBC,QAAS,kBAAmBC,OAAQ,cAAiB,KACzHT,GAAiBC,EAAmB,CAAEM,MAAO,wBAAyBC,QAAS,oBAAqBC,OAAQ,cAAiB,KAC7HT,GAAiBC,EAAmB,CAAEM,MAAO,sBAAuBC,QAAS,oBAAqBC,OAAQ,cAAiB,KAC3HT,GAAiBC,EAAmB,CAAEM,MAAO,aAAcC,QAAS,oBAAqBC,OAAQ,cAAiB,KAClHT,GAAiBC,EAAmB,CAAEM,MAAO,QAAW,KACzD,CAAEA,MAAO,gDAAiDC,QAAS,cAAeC,OAAQ,cAAeC,QAASL,GAClH,CAAEE,MAAO,QAASC,QAAS,gBAAiBC,OAAQ,cAAeC,SATnDL,GAAgBX,EAAKiB,qBAUrC,CAAEJ,MAAO,QACTJ,EAAkB,CAAEI,MAAO,4BAA6BC,QAAS,wBAAyBC,OAAQ,aAAcC,SAAS,GAAS,KAClIR,EAAgB,CAAEK,MAAO,8BAA+BC,QAAS,0BAA2BC,OAAQ,aAAcC,SAAS,GAAS,KACpI,CAAEH,MAAO,2DAA4DC,QAAS,mBAAoBC,OAAQ,cACtGC,QAASN,IACfQ,QAAOC,GAAe,OAARA,GACpB,CAEA,2BAAMrB,EAAsB,QAACgB,IACT,kBAAZA,EAYJzB,KAAKF,WAAWiC,eAAeN,EAAS,CACpC1B,KAAMC,KAAKD,KACXiC,SAAU,IAAYC,YAAYjC,KAAKD,MACvCmC,0BAA2BlC,KAAKF,WAAWqC,6BAA6BnC,KAAKD,MAC7EqC,wBAAyBpC,KAAKF,WAAWuC,2BAA2BrC,KAAKD,cAfjD,IAAcuC,QAAQ,gCAAgCtC,KAAKD,KAAKyB,iMAK9E,IAAOe,KAAK,2BAA2BvC,KAAKD,KAAKc,KAAKC,eAYxE,E","sources":["webpack://trilium/./src/public/app/menus/launcher_context_menu.js"],"sourcesContent":["import treeService from '../services/tree.js';\nimport froca from \"../services/froca.js\";\nimport contextMenu from \"./context_menu.js\";\nimport dialogService from \"../services/dialog.js\";\nimport server from \"../services/server.js\";\n\nexport default class LauncherContextMenu {\n    /**\n     * @param {NoteTreeWidget} treeWidget\n     * @param {FancytreeNode} node\n     */\n    constructor(treeWidget, node) {\n        this.treeWidget = treeWidget;\n        this.node = node;\n    }\n\n    async show(e) {\n        contextMenu.show({\n            x: e.pageX,\n            y: e.pageY,\n            items: await this.getMenuItems(),\n            selectMenuItemHandler: (item, e) => this.selectMenuItemHandler(item)\n        })\n    }\n\n    async getMenuItems() {\n        const note = await froca.getNote(this.node.data.noteId);\n        const parentNoteId = this.node.getParent().data.noteId;\n\n        const isVisibleRoot = note.noteId === '_lbVisibleLaunchers';\n        const isAvailableRoot = note.noteId === '_lbAvailableLaunchers';\n        const isVisibleItem = parentNoteId === '_lbVisibleLaunchers';\n        const isAvailableItem = parentNoteId === '_lbAvailableLaunchers';\n        const isItem = isVisibleItem || isAvailableItem;\n        const canBeDeleted = !note.noteId.startsWith(\"_\"); // fixed notes can't be deleted\n        const canBeReset = !canBeDeleted && note.isLaunchBarConfig();;\n\n        return [\n            (isVisibleRoot || isAvailableRoot) ? { title: 'Add a note launcher', command: 'addNoteLauncher', uiIcon: \"bx bx-plus\" } : null,\n            (isVisibleRoot || isAvailableRoot) ? { title: 'Add a script launcher', command: 'addScriptLauncher', uiIcon: \"bx bx-plus\" } : null,\n            (isVisibleRoot || isAvailableRoot) ? { title: 'Add a custom widget', command: 'addWidgetLauncher', uiIcon: \"bx bx-plus\" } : null,\n            (isVisibleRoot || isAvailableRoot) ? { title: 'Add spacer', command: 'addSpacerLauncher', uiIcon: \"bx bx-plus\" } : null,\n            (isVisibleRoot || isAvailableRoot) ? { title: \"----\" } : null,\n            { title: 'Delete <kbd data-command=\"deleteNotes\"></kbd>', command: \"deleteNotes\", uiIcon: \"bx bx-trash\", enabled: canBeDeleted },\n            { title: 'Reset', command: \"resetLauncher\", uiIcon: \"bx bx-empty\", enabled: canBeReset},\n            { title: \"----\" },\n            isAvailableItem ? { title: 'Move to visible launchers', command: \"moveLauncherToVisible\", uiIcon: \"bx bx-show\", enabled: true } : null,\n            isVisibleItem ? { title: 'Move to available launchers', command: \"moveLauncherToAvailable\", uiIcon: \"bx bx-hide\", enabled: true } : null,\n            { title: `Duplicate launcher <kbd data-command=\"duplicateSubtree\">`, command: \"duplicateSubtree\", uiIcon: \"bx bx-empty\",\n                enabled: isItem }\n        ].filter(row => row !== null);\n    }\n\n    async selectMenuItemHandler({command}) {\n        if (command === 'resetLauncher') {\n            const confirmed = await dialogService.confirm(`Do you really want to reset \"${this.node.title}\"? \n                       All data / settings in this note (and its children) will be lost \n                       and the launcher will be returned to its original location.`);\n\n            if (confirmed) {\n                await server.post(`special-notes/launchers/${this.node.data.noteId}/reset`);\n            }\n\n            return;\n        }\n\n        this.treeWidget.triggerCommand(command, {\n            node: this.node,\n            notePath: treeService.getNotePath(this.node),\n            selectedOrActiveBranchIds: this.treeWidget.getSelectedOrActiveBranchIds(this.node),\n            selectedOrActiveNoteIds: this.treeWidget.getSelectedOrActiveNoteIds(this.node)\n        });\n    }\n}\n"],"names":["LauncherContextMenu","constructor","treeWidget","node","this","show","e","x","pageX","y","pageY","items","getMenuItems","selectMenuItemHandler","item","note","getNote","data","noteId","parentNoteId","getParent","isVisibleRoot","isAvailableRoot","isVisibleItem","isAvailableItem","isItem","canBeDeleted","startsWith","title","command","uiIcon","enabled","isLaunchBarConfig","filter","row","triggerCommand","notePath","getNotePath","selectedOrActiveBranchIds","getSelectedOrActiveBranchIds","selectedOrActiveNoteIds","getSelectedOrActiveNoteIds","confirm","post"],"sourceRoot":""}